buildscript {
    def springBootVersion = '2.3.1.RELEASE'
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:2.4.0"
    }
}

wrapper {
    gradleVersion = '5.6.4'
}

allprojects {
    version = '0.0.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    repositories {
        mavenCentral()
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    def mapStructVersion = '1.4.2.Final'

    dependencies {
        implementation ('org.springframework.boot:spring-boot-starter-web') {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        }
        implementation 'com.google.code.gson:gson'
        implementation "org.mapstruct:mapstruct:$mapStructVersion"
        testImplementation "org.mapstruct:mapstruct:$mapStructVersion"
        annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
        implementation 'org.projectlombok:lombok'
        testImplementation 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
    }
}

project(':picktime-core') {
    dependencies {
        implementation 'org.apache.httpcomponents:httpclient'
        implementation 'javax.servlet:javax.servlet-api:4.0.1'
        implementation 'org.springframework.security:spring-security-core'
        implementation 'javax.xml.bind:jaxb-api:2.3.1'
        implementation 'software.amazon.awssdk:s3:2.17.85'
        implementation 'org.apache.tika:tika-core:2.0.0'
    }
}

project(':picktime-core-payment') {
    apply plugin: 'java-library'

    dependencies {
        implementation project(':picktime-core')
        implementation 'commons-codec:commons-codec'
        api 'org.springframework.boot:spring-boot-starter-validation'
    }
}

project(":picktime-core-domain") {
    apply plugin: 'java-library'

    dependencies {
        implementation project(':picktime-core')
        api 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
        api 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.mybatis:mybatis-typehandlers-jsr310:1.0.2'
        implementation 'org.springframework.security:spring-security-core'
    }

    task deleteCoreDomainGeneratedSources {
        delete 'src/main/generated'
    }
}

project(':picktime-app-web-api') {
    apply plugin: 'org.asciidoctor.jvm.convert'
    classes.dependsOn ':picktime-core:build'
    classes.dependsOn ':picktime-core-domain:build'
    classes.dependsOn ':picktime-core-payment:build'
    dependencies {
        implementation project(':picktime-core')
        implementation project(':picktime-core-domain')
        implementation project(':picktime-core-payment')
        implementation 'mysql:mysql-connector-java'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        implementation 'org.springframework.boot:spring-boot-starter-undertow'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    }
}

project(':picktime-app-web-admin') {
    classes.dependsOn ':picktime-core:build'
    classes.dependsOn ':picktime-core-domain:build'
    classes.dependsOn ':picktime-core-payment:build'
    dependencies {
        implementation project(':picktime-core')
        implementation project(':picktime-core-domain')
        // 결제 취소용
        implementation project(':picktime-core-payment')
        implementation 'mysql:mysql-connector-java'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'com.github.zhanhb:thymeleaf-layout-dialect:2.4.1'
        implementation 'org.springframework.boot:spring-boot-starter-undertow'
        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.apache.poi:poi:5.0.0'
        implementation 'org.apache.poi:poi-ooxml:5.0.0'
    }
}

project(':picktime-data-search') {
    dependencies {
        implementation 'mysql:mysql-connector-java'
        implementation 'org.springframework.boot:spring-boot-starter-undertow'
        implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    }
}